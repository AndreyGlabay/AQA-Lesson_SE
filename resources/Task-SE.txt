(0) Create new Java Maven Project.
    - (a) Change the project structure from "src/main/java/com.example.school.test" to the
      "src/main/java/com.example"
    - (b) Add to the project structure dir "/resources" with Task's solution description file Task-SE.txt
    - (c) pom.xml: add dependencies from Maven repo for Selenium and TestNG, and rebuild Project.
    - (d) gitignore: modify the file by adding more rules.


(1) Create package /src/test/java/com.example.test and test class ChromeTest in this package.
    - (a) Test Class ChromeTest: implement annotation @Test with test method testChrome().
    - (b) ChromeTest @Test testChrome(): implements new driver with WebDriver for Chrome.
    - (c) ChromeTest: Implements new var with URL for website visiting.
    - (d) ChromeTest @Test testChrome(): implements new instance for website visiting with the driver.
    - (e) ChromeTest @Test testChrome(): get Title from the website.
    - (f) ChromeTest @Test testChrome(): assert the Title.


(2) Copy annotation @Test and change the driver from Chrome to FireFox.
    - (a) ChromeTest @Test testFirefox(): implements new driver with WebDriver for FireFox.
    - (b) ChromeTest @Test testFirefox(): implements new instance for website visiting with the driver.
    - (c) ChromeTest @Test testFirefox(): get Title from the website.
    - (d) ChromeTest @Test testFirefox(): assert the Title.


(3) Create a separate test class and move testFireFox() to it.


(4) Create var for driver and move driver opening & closing to @Before & @After to stop instances from multiplying:
    - (a) Test classes ChromeTest & FireFoxTest: move driver opening to @BeforeTest
    - (b) Test classes ChromeTest & FireFoxTest: move driver closing to @AfterTest

(5) Set up Selenium Server (Grid)
    - (a) https://www.selenium.dev/downloads/ -> Selenium Server (Grid) -> download Latest stable version (4.17.0);
    - (b) In the dir with downloading file open terminal (Win) R.click -> Open in terminal -> PowerShell ->
          -> execute command -> java -jar ./selenium-server-4.17.0.jar standalone --port 6789 ->
          -> Selenium Server (Grid) standalone going to run.


(6) Implements test class for test run on the remote computer (in this task still local - localhost)
    - (a) Copy test class ChromeTest and rename it to RemoteChromeTest (ChromeTest -> Refactor -> CopyClass)
    - (b) Test class RemoteChromeTest: Initiate gridUrl var with HTTP + localhost + port num;
    - (c) RemoteChromeTest: Initiate options var with ChromeOptions();
    - (d) RemoteChromeTest @BeforeTest: Modify driver opening with RemoteWebDriver();

 * NOTE: In this task, we use local PC for demo - localhost; IRL we're gonna to use predefined PC with Grid on it;

(7)
    - (a) RemoteChromeTest @Test: using driver get URL + EP;
    - (b) RemoteChromeTest @Test: et element with class name;
    - (c) RemoteChromeTest @Test: Assert that in the class there is the text "Text Box";

** NOTE: Before test run should be running standalone agent - from Terminal, using command
         java -jar ./selenium-server-4.17.0.jar standalone --port 6789

------------------------------------------------------------------------------------------------------------------------

(8) Create new class: ChromeNewTest.

(8.0) ChromeNewTest test class: declare var "driver", initiate vars for URL, Path and EP;
(8.1) @BeforeTest: Implements Chrome instance opening;
(8.2) @AfterTest: Implements Chrome instance closing;
(8.3) @Test: ?????????????????????????????


(9) Create new test method: testForm1()

(9.1) testForm1(): create locators for inputs FirstName, LastName.
(9.2) ChromeNewTest test class: initiate vars Path and EP for web page with forms.
(9.3) testForm1(): Get new instance of web page with forms.
(9.4) testForm1(): Find an element using Locator.
(9.5) testForm1(): Insert value to this element.
(9.6) testForm1(): Create locators for inputs Gender, DoB, Subjects, Hobbies, Submit button.
(9.7) testForm1(): Find the elements and insert values.

------------------------------------------------------------------------------------------------------------------------
TASK
Create test cases for the project "https://www.saucedemo.com/" with at least 3 scenarios and 1 PageObject.


(10) Create new branch 'pageobj'
     - (a) Create new package 'pageobject': src/test/java/com.example/pageobject
     - (b) In package src/test/java/com.example/test: Create new test class - SwagLabsTest.java

(11.0) Test class SwagLabsTest.java: implement var for web driver;
(11.1) Test class SwagLabsTest.java: create annotations @BeforeTest and using test method arrange start of web browser.
(11.2) Test class SwagLabsTest.java: create annotations @AfterTest and using test method arrange stop of web browser.
(11.3) Test class SwagLabsTest.java: implement var for base URL;
(11.4) Test class SwagLabsTest.java: create annotations @Test and implement open web page GET URL using web driver;

(12.0) @Test: Modify test method name to SuccessLoginStandardUser;
(12.1) SuccessLoginStandardUser(): implements var login with valid login.
(12.2) SuccessLoginStandardUser(): implements var password with valid password.

(13.0) Package src/test/java/com.example/pageobject: create new test class LoginPage.java
(13.1) Test class LoginPage.java: implement var for web driver.
(13.2) LoginPage.java: Create locators for input_login, input_password, button_login, error_message.
(13.3) LoginPage.java: Create an object using method LoginPage(WebDriver driver).
(13.4) LoginPage(WebDriver driver): Put elements to the obj using locators.
(13.5) LoginPage.java: Create WebElements for UserName input, Password input, Login button, Error message.
(13.6) LoginPage.java: Using login() method arrange login flow.

(14.1) SwagLabsTest.java - SuccessLoginStandardUser(): arrange login flow using LoginPage Object.

(15.1) LoginPage.java: Create checkMessage() method for Error Message check in a wrong login flow case.

(16.1) SwagLabsTest.java: Create new test method UnSuccessLoginLockedUser()
(16.2) UnSuccessLoginLockedUser(): check login flow for the locked user.
(16.3) UnSuccessLoginLockedUser(): check the error message content.

(17) Check that after success login - the user is redirecting to the corresponding page.
(17.1) SuccessLoginStandardUser(): assert page's URL after success login.

(18) Check that after unsuccess login with the locked username - the error message contains corresponding text.
(18.1) UnSuccessLoginLockedUser(): assert that in the error message the text is matches expected.

(19) SwagLabsTest.java: @AfterTest: Add 5s delay after each test.

(20) Package src/test/java/com.example/pageobject: copy and rename new test class: LoginPage.java -> InventoryPage.java.
(20.0) InventoryPage.java: Remove all unnecessary.
(20.1) InventoryPage.java: Create locator for Inventory items.
(20.2) InventoryPage.java: Implements the list of Inventory items.
